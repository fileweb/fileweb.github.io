import java.io.DataInputStream;
import java.io.IOException;
import java.math.BigInteger;
import java.util.*;
public class RSA
{
    
	private int bitlength = 1024;
    Random r = new Random();

    BigInteger p = BigInteger.probablePrime(bitlength, r);
    BigInteger q = BigInteger.probablePrime(bitlength, r);

    BigInteger N = p.multiply(q);
    BigInteger phi = p.subtract(BigInteger.ONE).multiply(q.subtract(BigInteger.ONE));

    BigInteger e = BigInteger.probablePrime(bitlength, r);
    BigInteger d = e.modInverse(phi);



	public static void main(String[] args) throws IOException
	{
		RSA rsa = new RSA();
        Scanner in = new Scanner(System.in);

		System.out.println("Enter the plain text:");
        String teststring = in.nextLine();
        
        System.out.println("Encrypting String: " + teststring);
        System.out.println("String in Bytes: " + Arrays.toString(teststring.getBytes()));
        
		// encrypt
        byte[] encrypted = rsa.encrypt(teststring.getBytes());
        
		// decrypt
        byte[] decrypted = rsa.decrypt(encrypted); 

        System.out.println("Decrypting Bytes: " + Arrays.toString(decrypted));
        System.out.println("Decrypted String: " + new String(decrypted));
    }
    
	// Encrypt message
	public byte[] encrypt(byte[] message)
	{
		return (new BigInteger(message)).modPow(e, N).toByteArray();
	}
	// Decrypt message
	public byte[] decrypt(byte[] message)
	{
		return (new BigInteger(message)).modPow(d, N).toByteArray();
	}
}